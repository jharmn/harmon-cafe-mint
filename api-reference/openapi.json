{
  "openapi": "3.0.0",
  "info": {
    "description": "# Introduction\nThis is an API specification of the ['How to GET a Cup of Coffee' Article by Jim Webber](https://www.infoq.com/articles/webber-rest-workflow/)\n\n\nThe Order resource has the following state lifecycle:\n![Lifecycle for the Order resource](https://jargon.sh/user/jargon/Cafe/v/working/artefacts/statemachine/render.svg?class=Order%20lifecycle&light=true)",
    "contact": {
      "email": "you@example.com",
      "url": "https://example.com/help"
    },
    "version": "unreleased",
    "title": "Coffee Store API"
  },
  "paths": {
    "/stores/{storeId}/orders": {
      "post": {
        "tags": [
          "Store"
        ],
        "parameters": [
          {
            "name": "storeId",
            "description": "",
            "schema": {
              "type": "number"
            },
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        },
        "summary": "Create a new Store Order",
        "operationId": "createStoreOrder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            }
          }
        },
        "description": "Some description of the operation.\n\n***You can use keep using `markdown` here to write out your description in more detail.***\n"
      }
    },
    "/stores/{storeId}/orders/{ordersId}": {
      "get": {
        "tags": [
          "Store"
        ],
        "parameters": [
          {
            "name": "storeId",
            "description": "",
            "schema": {
              "type": "number"
            },
            "in": "path",
            "required": true
          },
          {
            "name": "ordersId",
            "description": "",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        },
        "summary": "Get a Store Order",
        "operationId": "getStoreOrderById",
        "description": "Gets the details of this order"
      },
      "put": {
        "tags": [
          "Store"
        ],
        "parameters": [
          {
            "name": "storeId",
            "description": "",
            "schema": {
              "type": "number"
            },
            "in": "path",
            "required": true
          },
          {
            "name": "ordersId",
            "description": "",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        },
        "summary": "Replace a Store Order",
        "operationId": "replaceStoreOrderById",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            }
          }
        },
        "description": "Updates this order, but only while it's state is 'Placed'. Updates after this point will be rejected"
      },
      "delete": {
        "tags": [
          "Store"
        ],
        "parameters": [
          {
            "name": "storeId",
            "description": "",
            "schema": {
              "type": "number"
            },
            "in": "path",
            "required": true
          },
          {
            "name": "ordersId",
            "description": "",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          }
        },
        "summary": "Delete a Store Order",
        "operationId": "deleteStoreOrderById",
        "description": "Removes this order. \n\nCancels the order, if the status is 'Placed'\nCollects the order, if the status is 'Ready'"
      },
      "options": {
        "tags": [
          "Store"
        ],
        "parameters": [
          {
            "name": "storeId",
            "description": "",
            "schema": {
              "type": "number"
            },
            "in": "path",
            "required": true
          },
          {
            "name": "ordersId",
            "description": "",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        },
        "summary": "Query Store Order",
        "operationId": "queryStoreOrderById",
        "description": "Identifies what operations are allowable on this Order"
      }
    },
    "/payments/{id}": {
      "put": {
        "tags": [
          "Payment"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              }
            }
          }
        },
        "summary": "Make a Payment",
        "operationId": "makePaymentById",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Payment"
              }
            }
          }
        },
        "description": "Makes a payment for an Order Id"
      }
    }
  },
  "components": {
    "parameters": {
      "protective_marking": {
        "in": "header",
        "name": "X-Protective-Marking",
        "schema": {
          "type": "string"
        },
        "x-example": "X-Protective-Marking: VER=<ver>, NS=gov.au, SEC=<securityClassification>",
        "description": "Transmission of any payload, request or response, containing data classified as having a high business impact level or above SHOULD apply by an ‘x-protective-marking’ HTTP header.\n-\tAn ‘x-protective-marking’ HTTP header MUST be used to apply appropriate protective marking to Commonwealth information classified as having a high business impact level or above (classification of ‘PROTECTED’), and SHOULD be applied to Commonwealth information classified as having a medium business impact level."
      }
    },
    "schemas": {
      "Order": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": ""
          },
          "milk": {
            "type": "string",
            "enum": [
              "Skim",
              "Full",
              "Soy"
            ],
            "example": "Skim",
            "description": ""
          },
          "size": {
            "type": "string",
            "enum": [
              "Small",
              "Regular",
              "Large"
            ],
            "example": "Small",
            "description": ""
          },
          "type": {
            "type": "string",
            "enum": [
              "Latte",
              "Flat White"
            ],
            "example": "Latte",
            "description": ""
          },
          "status": {
            "readOnly": true,
            "type": "string",
            "enum": [
              "Placed",
              "Preparing",
              "Cancelled",
              "Ready",
              "Completed"
            ],
            "example": "Placed",
            "description": ""
          }
        }
      },
      "Payment": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "Valid",
              "Invalid"
            ],
            "example": "Valid",
            "description": ""
          },
          "order": {
            "type": "number",
            "description": "\nThis field is the identifier of Order (id). It's definition is:\n\n"
          }
        }
      },
      "Template_ErrorSchema": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Template_Error"
            },
            "description": ""
          }
        }
      },
      "Template_Error": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "description": ""
          },
          "detail": {
            "type": "string",
            "description": ""
          },
          "code": {
            "type": "string",
            "description": ""
          },
          "source": {
            "$ref": "#/components/schemas/Template_ErrorSource",
            "description": ""
          }
        }
      },
      "Template_ErrorSource": {
        "type": "object",
        "properties": {
          "pointer": {
            "type": "string",
            "description": ""
          },
          "parameter": {
            "type": "string",
            "description": ""
          }
        }
      }
    },
    "responses": {},
    "securitySchemes": {}
  },
  "servers": [
    {
      "url": "/"
    }
  ]
}